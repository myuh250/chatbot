const API_BASE_URL = 'http://localhost:8000';

// Service ƒë·ªÉ g·ªçi API history
export const historyService = {
  // Th√™m message m·ªõi
  async addMessage(userId, role, content) {
    try {
      const response = await fetch(`${API_BASE_URL}/history/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          user_id: userId,
          role: role,
          content: content
        })
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      return await response.json();
    } catch (error) {
      console.error('Error adding message:', error);
      throw error;
    }
  },

  // L·∫•y l·ªãch s·ª≠ chat
  async getHistory(userId = null) {
    try {
      const url = userId 
        ? `${API_BASE_URL}/history/?user_id=${userId}`
        : `${API_BASE_URL}/history/`;
      
      const response = await fetch(url);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      return await response.json();
    } catch (error) {
      console.error('Error getting history:', error);
      throw error;
    }
  }
};

// Service cho chatbot
export const chatbotService = {
  // X·ª≠ l√Ω tin nh·∫Øn v·ªõi logic ƒë·∫ßy ƒë·ªß (API m·ªõi)
  async processMessage(userInput, orderId = null) {
    try {
      const response = await fetch(`${API_BASE_URL}/chatbot/process`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          message: userInput,
          order_id: orderId 
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('Error processing message:', error);
      throw error;
    }
  },

  // X√°c nh·∫≠n ƒë∆°n h√†ng
  async confirmOrder(orderId) {
    try {
      const response = await fetch(`${API_BASE_URL}/chatbot/confirm`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ order_id: orderId }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('Error confirming order:', error);
      throw error;
    }
  },

  // L·∫•y ƒë∆°n h√†ng ƒë√£ x√°c nh·∫≠n
  async getConfirmedOrders() {
    try {
      const response = await fetch(`${API_BASE_URL}/chatbot/confirmed-orders`);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('Error getting confirmed orders:', error);
      throw error;
    }
  },

  // Ph√¢n t√≠ch v√† l∆∞u ƒë∆°n h√†ng (API c≈© - v·∫´n gi·ªØ ƒë·ªÉ t∆∞∆°ng th√≠ch)
  async analyzeAndSaveOrder(userInput) {
    try {
      const response = await fetch(`${API_BASE_URL}/chatbot/analyze`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ message: userInput }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('Error analyzing and saving order:', error);
      throw error;
    }
  },

  // T·∫°o bot response (t·∫°m th·ªùi d√πng logic c≈©, sau n√†y c√≥ th·ªÉ call API chatbot)
  generateResponse(userInput) {
    const input = userInput.toLowerCase();
    
    if (input.includes('ƒë·∫∑t b√°nh') || input.includes('order') || input.includes('mua')) {
      return 'Tuy·ªát v·ªùi! ƒê·ªÉ ƒë·∫∑t b√°nh, b·∫°n vui l√≤ng cho t√¥i bi·∫øt:\n‚Ä¢ Lo·∫°i b√°nh b·∫°n mu·ªën\n‚Ä¢ S·ªë l∆∞·ª£ng\n‚Ä¢ Th·ªùi gian nh·∫≠n h√†ng\n‚Ä¢ ƒê·ªãa ch·ªâ giao h√†ng (n·∫øu c·∫ßn)\n\nCh√∫ng t√¥i c√≥ b√°nh sinh nh·∫≠t, b√°nh c∆∞·ªõi, b√°nh kem, b√°nh m√¨ v√† nhi·ªÅu lo·∫°i kh√°c!';
    }
    
    if (input.includes('gi√°') || input.includes('price') || input.includes('bao nhi√™u')) {
      return 'B·∫£ng gi√° c√°c s·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i:\n‚Ä¢ B√°nh sinh nh·∫≠t: 250,000 - 1,500,000 VNƒê\n‚Ä¢ B√°nh kem nh·ªè: 150,000 - 300,000 VNƒê\n‚Ä¢ B√°nh m√¨: 15,000 - 25,000 VNƒê\n‚Ä¢ B√°nh ng·ªçt: 20,000 - 80,000 VNƒê\n\nGi√° c√≥ th·ªÉ thay ƒë·ªïi t√πy theo k√≠ch th∆∞·ªõc v√† thi·∫øt k·∫ø!';
    }
    
    if (input.includes('ƒë·ªãa ch·ªâ') || input.includes('address') || input.includes('·ªü ƒë√¢u')) {
      return 'Ti·ªám b√°nh c·ªßa ch√∫ng t√¥i t·ªça l·∫°c t·∫°i:\nüìç 123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM\nüìû Hotline: 0123-456-789\nüïí Gi·ªù m·ªü c·ª≠a: 7:00 - 22:00 h√†ng ng√†y\n\nCh√∫ng t√¥i c≈©ng c√≥ d·ªãch v·ª• giao h√†ng t·∫≠n n∆°i!';
    }
    
    return 'C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! T√¥i ƒë√£ ghi nh·∫≠n th√¥ng tin c·ªßa b·∫°n. Nh√¢n vi√™n c·ªßa ch√∫ng t√¥i s·∫Ω li√™n h·ªá l·∫°i trong th·ªùi gian s·ªõm nh·∫•t ƒë·ªÉ h·ªó tr·ª£ b·∫°n t·ªët h∆°n. B·∫°n c√≥ th·ªÉ ƒë·∫∑t th√™m c√¢u h·ªèi kh√°c kh√¥ng?';
  }
};