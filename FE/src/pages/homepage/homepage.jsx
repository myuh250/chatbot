import React, { useState, useRef, useEffect } from 'react';
import { Send, Bot, User, Cake, Clock, MapPin } from 'lucide-react';
import './homepage.css';

const Homepage = () => {
  const [messages, setMessages] = useState([
    {
      id: 1,
      type: 'bot',
      content: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa ti·ªám b√°nh. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ƒë·∫∑t b√°nh, t∆∞ v·∫•n s·∫£n ph·∫©m, v√† tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ d·ªãch v·ª• c·ªßa ch√∫ng t√¥i. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay?',
      timestamp: new Date()
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage = {
      id: messages.length + 1,
      type: 'user',
      content: inputMessage,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);

    // Simulate bot response (replace with actual API call)
    setTimeout(() => {
      const botResponse = generateBotResponse(inputMessage);
      const botMessage = {
        id: messages.length + 2,
        type: 'bot',
        content: botResponse,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, botMessage]);
      setIsTyping(false);
    }, 1500);
  };

  const generateBotResponse = (userInput) => {
    const input = userInput.toLowerCase();
    
    if (input.includes('ƒë·∫∑t b√°nh') || input.includes('order') || input.includes('mua')) {
      return 'Tuy·ªát v·ªùi! ƒê·ªÉ ƒë·∫∑t b√°nh, b·∫°n vui l√≤ng cho t√¥i bi·∫øt:\n‚Ä¢ Lo·∫°i b√°nh b·∫°n mu·ªën\n‚Ä¢ S·ªë l∆∞·ª£ng\n‚Ä¢ Th·ªùi gian nh·∫≠n h√†ng\n‚Ä¢ ƒê·ªãa ch·ªâ giao h√†ng (n·∫øu c·∫ßn)\n\nCh√∫ng t√¥i c√≥ b√°nh sinh nh·∫≠t, b√°nh c∆∞·ªõi, b√°nh kem, b√°nh m√¨ v√† nhi·ªÅu lo·∫°i kh√°c!';
    }
    
    if (input.includes('gi√°') || input.includes('price') || input.includes('bao nhi√™u')) {
      return 'B·∫£ng gi√° c√°c s·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i:\n‚Ä¢ B√°nh sinh nh·∫≠t: 250,000 - 1,500,000 VNƒê\n‚Ä¢ B√°nh kem nh·ªè: 150,000 - 300,000 VNƒê\n‚Ä¢ B√°nh m√¨: 15,000 - 25,000 VNƒê\n‚Ä¢ B√°nh ng·ªçt: 20,000 - 80,000 VNƒê\n\nGi√° c√≥ th·ªÉ thay ƒë·ªïi t√πy theo k√≠ch th∆∞·ªõc v√† thi·∫øt k·∫ø!';
    }
    
    if (input.includes('ƒë·ªãa ch·ªâ') || input.includes('address') || input.includes('·ªü ƒë√¢u')) {
      return 'Ti·ªám b√°nh c·ªßa ch√∫ng t√¥i t·ªça l·∫°c t·∫°i:\nüìç 123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM\nüìû Hotline: 0123-456-789\nüïí Gi·ªù m·ªü c·ª≠a: 7:00 - 22:00 h√†ng ng√†y\n\nCh√∫ng t√¥i c≈©ng c√≥ d·ªãch v·ª• giao h√†ng t·∫≠n n∆°i!';
    }
    
    return 'C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! T√¥i ƒë√£ ghi nh·∫≠n th√¥ng tin c·ªßa b·∫°n. Nh√¢n vi√™n c·ªßa ch√∫ng t√¥i s·∫Ω li√™n h·ªá l·∫°i trong th·ªùi gian s·ªõm nh·∫•t ƒë·ªÉ h·ªó tr·ª£ b·∫°n t·ªët h∆°n. B·∫°n c√≥ th·ªÉ ƒë·∫∑t th√™m c√¢u h·ªèi kh√°c kh√¥ng?';
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const formatTime = (date) => {
    return date.toLocaleTimeString('vi-VN', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  const quickActions = [
    { text: 'ƒê·∫∑t b√°nh sinh nh·∫≠t', icon: <Cake size={16} /> },
    { text: 'Xem b·∫£ng gi√°', icon: <Clock size={16} /> },
    { text: 'ƒê·ªãa ch·ªâ c·ª≠a h√†ng', icon: <MapPin size={16} /> }
  ];

  return (
    <div className="chatbot-container">
      <div className="chat-header">
        <div className="header-content">
          <div className="bot-avatar">
            <Bot size={24} />
          </div>
          <div className="header-info">
            <h2>Bakery Assistant</h2>
            <p className="status">‚óè ƒêang ho·∫°t ƒë·ªông</p>
          </div>
        </div>
      </div>

      <div className="chat-messages">
        {messages.map((message) => (
          <div key={message.id} className={`message ${message.type}`}>
            <div className="message-avatar">
              {message.type === 'bot' ? <Bot size={20} /> : <User size={20} />}
            </div>
            <div className="message-content">
              <div className="message-bubble">
                {message.content.split('\n').map((line, index) => (
                  <React.Fragment key={index}>
                    {line}
                    {index < message.content.split('\n').length - 1 && <br />}
                  </React.Fragment>
                ))}
              </div>
              <div className="message-time">
                {formatTime(message.timestamp)}
              </div>
            </div>
          </div>
        ))}
        
        {isTyping && (
          <div className="message bot">
            <div className="message-avatar">
              <Bot size={20} />
            </div>
            <div className="message-content">
              <div className="message-bubble typing">
                <div className="typing-dots">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </div>
            </div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      <div className="quick-actions">
        {quickActions.map((action, index) => (
          <button
            key={index}
            className="quick-action-btn"
            onClick={() => setInputMessage(action.text)}
          >
            {action.icon}
            <span>{action.text}</span>
          </button>
        ))}
      </div>

      <div className="chat-input">
        <div className="input-container">
          <textarea
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n..."
            className="message-input"
            rows="1"
          />
          <button 
            onClick={handleSendMessage}
            className="send-btn"
            disabled={!inputMessage.trim() || isTyping}
          >
            <Send size={20} />
          </button>
        </div>
      </div>
    </div>
  );
};

export default Homepage;
